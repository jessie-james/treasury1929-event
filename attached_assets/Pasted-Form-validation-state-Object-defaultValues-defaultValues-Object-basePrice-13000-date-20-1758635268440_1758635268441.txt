Form validation state: 
Object {defaultValues: {…}}
defaultValues: Object
basePrice: 13000
date: "2025-09-23"
description: ""
eventType: "full"
image: ""
includeAlcohol: true
includeBeverages: true
includeFoodService: true
isActive: true
isPrivate: false
maxTicketsPerPurchase: 8
priceDisplay: ""
ticketPrice: 5000
title: ""
venueId: 1
[[Prototype]]: Object
dirtyFields: Object
get dirtyFields: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
disabled: false
get disabled: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
errors: Object
get errors: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isDirty: false
get isDirty: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isLoading: false
get isLoading: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isSubmitSuccessful: false
get isSubmitSuccessful: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isSubmitted: false
get isSubmitted: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isSubmitting: false
get isSubmitting: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isValid: false
get isValid: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
isValidating: false
get isValidating: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
name: "priceDisplay"
get name: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
submitCount: 0
get submitCount: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
touchedFields: Object
get touchedFields: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
validatingFields: Object
get validatingFields: ƒ ()=>{const o=i;return t._proxyFormState[o]!==fa.all&&(t._proxyFormState[o]=!n||fa.all),r&&(r[o]=!0),e[o]}
[[Prototype]]: Object
Is form valid: false
Form errors: 
Object {}
✅ Form validation passed - calling saveEvent
Submitting event data: 
Object {title: "test event 9/23/25", description: "test", image: "/uploads/2bc702f7-39eb-4e7c-a2ef-f718fdb3d137.jpg", date: "2025-09-30T00:00:00.000Z", venueId: 1, …}
API Request: POST /api/events
Network error with POST request to /api/events: 
Error {}

API Request: PUT /api/events/undefined/food-options
Network error with PUT request to /api/events/undefined/food-options: 
Error {}

Query Request: GET /api/events