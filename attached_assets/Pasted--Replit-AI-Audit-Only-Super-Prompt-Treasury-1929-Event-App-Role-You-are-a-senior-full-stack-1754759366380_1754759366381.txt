üîé Replit AI ‚Äî ‚ÄúAudit-Only‚Äù Super Prompt (Treasury 1929 Event App)
Role: You are a senior full-stack engineer acting as an auditor.
Prime directive: Do not modify any files, settings, or secrets. Produce an analysis document only.

Context (must anchor all checks):

App: Event venue booking app for The Treasury 1929 (Replit).

Single live event right now. Event starts at 6:30 PM, doors at 5:45 PM.

Fixed timezone: America/Phoenix (all guests are in Tucson).

Hot issues:

Time/Timezone: must consistently show Arrive 5:45 PM and Show 6:30 PM in America/Phoenix everywhere (UI + emails + PDFs).

Emails: Confirmation + refund emails intermittently not sending (SendGrid).

Keys/Ownership: Stripe + SendGrid must use Treasury-owned keys only.

Table/Seat Label Consistency (NEW): Customer-facing views must show the human table label the guest presents (e.g., ‚ÄúTable 6‚Äù, ‚ÄúTable 201‚Äù for mezzanine), never an internal counter/auto-increment (e.g., ‚ÄúTable 297‚Äù). Admin almost never needs the internal count; booking number + customer-facing table label are sufficient.

Secondary: verify webhooks, env separation, logging, security, performance, DNS/custom domain readiness.

‚úÖ Deliverable Format (return exactly this structure)
Return a single markdown report titled ‚ÄúTreasury 1929 Audit ‚Äî [date/time]‚Äù with these sections:

Executive Summary (5‚Äì10 bullets)

System Inventory

Time & Timezone Audit (America/Phoenix required)

Email Flows Audit (SendGrid)

Payments/Refunds Audit (Stripe)

Secrets & Ownership Validation

Deployment, Domain & DNS Readiness

Security Review

Performance Review

Table/Seat Label Consistency (NEW)

Reproduction Steps (for each bug)

Fix Plan (No changes applied)

QA Checklist

üìã Data You Must Gather (without editing anything)
A. Project & Runtime
Project tree (depth 2), entrypoints, framework, start scripts.

B. Environment & Secrets (NO values)
Two tables:

B1) Environment Variables (by environment)
| Name | Present In (Replit env/deployment) | Used By (file:line) | Purpose | Expected Owner | Mode (test/live) |

B2) Third-Party Credentials
| Service | Env Var Name | Where Referenced | Current Account/Key Label (if inferable) | Owner (Treasury/Jose) | Risk |

Search for process.env, os.environ, any hard-coded keys.

C. Stripe
Init locations, webhook endpoints (URLs + events), refund flow, live/test mode, idempotency, error handling.

D. SendGrid
Init, sender domain/from, template IDs (purchase confirm, refund, cancel, reset), error/await handling, logging.

E. Time/Timezone
Libraries used, storage format (UTC vs local), render points (UI + emails + PDFs), explicit America/Phoenix usage.

Where Arrive 5:45 PM and Show 6:30 PM are displayed (or missing).

F. Logs & Telemetry
Where logs are written; sample logs for purchase & refund paths; any swallowed errors.

G. Table/Seat Label Consistency (NEW)
Source of truth for customer-facing table/seat label (schema fields like table_label, seat_label, section, level, etc.).

Any internal counters/IDs (e.g., id, table_id, seat_id, allocation_id, global_index) that could leak into templates.

All render paths (checkout summary, ticket PDF/HTML, confirmation email, refund email, admin view) and which field each path uses.

Transformation logic that maps internal rows to human labels (e.g., mezzanine ‚Äú200-series‚Äù like 201, 205).

Examples (5+ real sample bookings) showing booking number + human table label vs any internal number currently displayed.

üîé Commands & Code Inspections to Run (read-only)
If a command doesn‚Äôt exist in this environment, skip it and note the skip.

Filesystem & deps

ls -la and shallow tree (depth 2)

cat package.json (Node) or cat requirements.txt / pyproject.toml (Python)

Entrypoints:

grep -R "app.listen\|createServer\|FastAPI\|Flask\|Django" -n .

Env usage & potential hard-coded keys

grep -R "process\.env\|os\.environ\|SENDGRID\|STRIPE" -n .

grep -R "sk_live\|sk_test\|SG\.[A-Za-z0-9_\-\.]" -n .

Stripe

grep -R "require('stripe')\|import Stripe" -n .

grep -R "webhook\|refund\|checkout\|payment_intent" -n .

SendGrid

grep -R "@sendgrid/mail\|sendgrid\|sgMail" -n .

grep -R "templateId\|setApiKey\|from:" -n .

Time & formatting

grep -R "Date(\|toLocale\|Intl\.DateTimeFormat\|moment\|dayjs\|luxon" -n .

grep -R "America/Phoenix\|US/Arizona" -n .

Routes & handlers

grep -R "POST\s*/refund\|refund" -n .

grep -R "confirm\|confirmation" -n .

grep -R "webhook" -n .

Table/Seat labels (NEW)

grep -R "table_label\|seat_label\|tableNumber\|seatNumber\|table_id\|seat_id\|allocation\|mezzanine" -n .

grep -R "label.*table\|table.*label" -n .

grep -R "Table\s*[0-9]\{1,3\}" -n templates/ emails/ tickets/ || true

If PDFs are generated: locate PDF/HTML ticket templates and email templates rendering the label.

Build/start logs (read only)

Print last 200 lines of server logs if available.

üß™ Tests You Must Perform (no changes, just run & report)
Time Rendering Test

Show actual rendered outputs for all pages/emails/PDFs that include event time.

Confirm Arrive 5:45 PM and Show 6:30 PM in America/Phoenix everywhere.

Purchase ‚Üí Confirmation Email (Dry-run/Test Mode)

Trace call path to SendGrid send, capture logs of parameters (no secrets), verify template and dynamic data.

Refund ‚Üí Refund Email

Trace whether trigger is via controller vs webhook; show failure points (missing await, wrong template, mode mismatch).

Webhook Signature Validation

Endpoint URL, signing secret, events list, and code path on payment_intent.succeeded / checkout.session.completed / charge.refunded.

Secrets Ownership Verification

For Stripe/SendGrid keys, infer owner and flag any lingering Jose keys.

Table/Seat Label Consistency (NEW)

For 5+ sample bookings (mix of floor + mezzanine), output a table:
| Booking # | Section/Level | Customer-Facing Label (expected) | Actually Rendered (UI) | Actually Rendered (Ticket/PDF) | Actually Rendered (Confirmation Email) | Notes |

Confirm mezzanine uses labels like 201, 205; floor uses simple numbers like 6, 17.

Identify any path showing internal counters (e.g., 297) and the exact template/component responsible.

üõ†Ô∏è What I Expect in the ‚ÄúFix Plan‚Äù Section (propose only)
Time/Timezone

Unified util for formatting with America/Phoenix; code snippets for server, client, and emails/PDFs.

Policy: store UTC, render Phoenix.

Emails

Centralized mailer with await, robust error handling, structured logs, template map (IDs as env vars).

Stripe/Webhooks

Single source of truth for refund email trigger (webhook-driven), idempotency, retries.

Secrets/Ownership

Migration checklist to Treasury-only keys; naming convention (e.g., TREASURY_STRIPE_SECRET, TREASURY_SENDGRID_API_KEY), .env.example (no secrets).

Security & Perf

Mask secrets, reduce PII in logs, request timeouts, remove blocking I/O from hot paths.

Table/Seat Label Consistency (NEW)

Schema contract: a canonical field for the customer label (e.g., table_label), optional section/level, and a separate internal id never used in rendering.

Render policy: All customer-facing outputs (checkout summary, ticket PDF/HTML, confirmation/refund emails, admin quick view) must reference only the canonical table_label.

Validation guard: Add a lightweight assertion/log when a label exceeds the venue‚Äôs defined range (e.g., > 299) or doesn‚Äôt match allowed patterns:

Floor: /^([1-9][0-9]?)$/

Mezzanine: /^20[1-9]$/ or venue-approved set.

Template patches: Show exact lines to replace where table_id/allocation_id is used; swap to table_label.

QA steps: Re-generate 5 sample tickets/emails and verify labels + screenshots.

QA Checklist

Box-checked steps for time displays, emails, refunds, and table label correctness across all surfaces.

Guardrails (repeat back you agree)
You will not modify files, secrets, or settings.

You will return one markdown report following the structure above with tables and grep results.

You will clearly mark any assumptions and any commands you could not run in Replit.

Final Prompt to Execute
‚ÄúAcknowledge these instructions and begin the read-only audit now. When done, output the single analysis report described above, nothing else.‚Äù

