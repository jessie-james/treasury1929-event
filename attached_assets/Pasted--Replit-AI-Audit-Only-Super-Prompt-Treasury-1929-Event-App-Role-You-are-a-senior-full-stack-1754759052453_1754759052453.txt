üîé Replit AI ‚Äî ‚ÄúAudit-Only‚Äù Super Prompt (Treasury 1929 Event App)
Role: You are a senior full-stack engineer acting as an auditor.
Prime directive: Do not modify any files, settings, or secrets. Produce an analysis document only.

Context (must anchor all checks):

App: Event venue booking app for The Treasury 1929 (deployed on Replit).

Single live event right now. Event starts at 6:30 PM, doors at 5:45 PM.

All users are in Tucson, AZ ‚Üí fixed timezone: America/Phoenix (no DST shifts like other zones; do not convert to users‚Äô local TZs).

Critical issues:

Displayed times are inconsistent (some tickets show only 6:30; guests must see Arrive 5:45 PM, Show 6:30 PM; all in America/Phoenix).

Emails: Confirmation and refund emails aren‚Äôt always sending.

Keys/ownership: Must ensure Stripe and SendGrid use Treasury‚Äôs keys only (not Jose‚Äôs). Replit account is Jose‚Äôs, but all external creds must be Treasury‚Äôs.

Secondary: verify webhooks, env separation (staging vs production), logging, security, performance, DNS/custom domain path readiness.

‚úÖ Deliverable Format (return exactly this structure)
Return a single markdown report titled ‚ÄúTreasury 1929 Audit ‚Äî [date/time]‚Äù with these sections:

Executive Summary (5‚Äì10 bullets)

Top problems found (ordered by severity)

1-sentence per fix approach

System Inventory

Stack & entrypoints (framework, runtime, start commands)

Env matrix (Replit run envs, deployments, preview vs prod)

Secrets & keys map (see tables below)

Outbound services (Stripe, SendGrid, other)

Time & Timezone Audit (America/Phoenix required)

Source(s) of truth for event times (DB/JSON/ENV)

Where & how time is formatted, stored, rendered

Any conversion libraries (moment/dayjs/luxon/Date) and usage

Places showing 5:45 PM (arrival) and 6:30 PM (start); where missing

Test matrix & screenshots/log excerpts showing actual outputs

Email Flows Audit (SendGrid)

All email triggers (purchase confirm, refund confirm, cancellations, password reset if present)

Template IDs, dynamic data passed, and conditional logic

API key in use (which env var), sender domain/auth status

Failure points (exceptions, catch blocks, silent promises)

Log evidence for success/failure paths

Payments/Refunds Audit (Stripe)

Payment, refund flows; where confirmations are fired

Webhook endpoints (URLs, events subscribed, secret validation)

Live vs test mode detection; env var sources

Idempotency, retries, and error handling

Secrets & Ownership Validation

Table: all secrets with owner/tenant (Treasury vs Jose), where set, who has access

Any hard-coded keys or mixed tenants

Required changes to consolidate on Treasury‚Äôs creds

Deployment, Domain & DNS Readiness

Current deployed URL(s), custom domain/subdomain status

Any proxying or path-based routing assumptions

Security Review

PII handling, logs, secret exposure, RBAC, CORS

Performance Review

Hot paths, N+1 queries, unawaited promises, blocking I/O, unnecessary external calls

Reproduction Steps (for each bug)

Exact commands/inputs, observed outputs, expected outputs

Fix Plan (No changes applied)

Diff-style patch proposals or code references per issue

Config changes required (env vars, webhook subscriptions)

Owner switch steps for keys

QA Checklist

Step-by-step acceptance tests for time display, emails, refunds, and webhooks

üìã Data You Must Gather (without editing anything)
A. Project & Runtime
List project root files (tree depth 2).

Identify server entrypoint(s) and framework (Express/FastAPI/Django/etc).

Show package.json/pyproject.toml/requirements.txt and start scripts.

B. Environment & Secrets (NO values, just metadata)
Create two tables:

B1) Environment Variables (by environment)

Name	Present In (Replit env/deployment)	Used By (file:line)	Purpose	Expected Owner	Mode (test/live)

B2) Third-Party Credentials

Service	Env Var Name	Where Referenced	Current Account/Key Label (if inferable)	Owner (Treasury/Jose)	Risk

Search the codebase for process.env, os.environ, and any hard-coded keys.

Identify duplicates like STRIPE_SECRET_KEY, STRIPE_API_KEY, SENDGRID_API_KEY, REPLIT_‚Ä¶, etc.

List any secrets set at deployment vs workspace level if you can detect.

C. Stripe
Locate Stripe init (key, apiVersion).

Enumerate webhook endpoints (URLs in code or env) and events subscribed.

Show where refunds are created/received and where refund email trigger should fire.

Verify live/test mode detection and accidental cross-mode usage.

D. SendGrid
Where API client is initialized; sender domain/from email.

Template IDs (purchase confirm, refund confirm, cancel, reset) and conditional branches.

Error handling (try/catch, logging), promise handling (await vs fire-and-forget).

E. Time/Timezone
All references to time libraries (Intl.DateTimeFormat, toLocaleString, dayjs/moment/luxon).

Data shape stored in DB (UTC vs local), any conversions on read/write.

All UI/components/emails where event times appear; confirm America/Phoenix is set explicitly.

Verify both Arrive 5:45 PM and Show 6:30 PM are displayed in all relevant places.

F. Logs & Telemetry
Where logs are written; sample outputs for purchase & refund flows.

Any dead catch blocks, console warnings, or suppressed errors.

üîé Commands & Code Inspections to Run (read-only)
If a command doesn‚Äôt exist in this environment, skip it and note the skip.

Filesystem & deps

List files: ls -la, and a shallow tree (depth 2).

Show package/deps:

Node: cat package.json

Python: cat requirements.txt or pyproject.toml

Entrypoints: grep for server bootstraps:

grep -R "app.listen\|createServer\|FastAPI\|Flask\|Django" -n .

Env usage & potential hard-coded keys

grep -R "process\.env\|os\.environ\|SENDGRID\|STRIPE" -n .

grep -R "sk_live\|sk_test\|SG\.[A-Za-z0-9_\-\.]" -n . (string signatures)

Stripe

grep -R "require('stripe')\|import Stripe" -n .

grep -R "webhook\|refund\|checkout\|payment_intent" -n .

SendGrid

grep -R "@sendgrid/mail\|sendgrid\|sgMail" -n .

grep -R "templateId\|setApiKey\|from:" -n .

Time & formatting

grep -R "Date(\|toLocale\|Intl\.DateTimeFormat\|moment\|dayjs\|luxon" -n .

grep -R "America/Phoenix\|US/Arizona" -n .

Routes & handlers

grep -R "POST\s*/refund\|refund" -n .

grep -R "confirm\|confirmation" -n .

grep -R "webhook" -n .

Build/start logs (read only)

Print last 200 lines of server logs if available.

üß™ Tests You Must Perform (no changes, just run & report)
Time Rendering Test

Generate the exact outputs for any route/template/email payload that renders event times.

Confirm both Arrive 5:45 PM and Show 6:30 PM appear where expected, in America/Phoenix.

Purchase ‚Üí Confirmation Email (Dry-run or Test Mode)

Trace the function call path from successful payment to email send.

Capture logs and confirm SendGrid call parameters (without secrets).

Refund ‚Üí Refund Email

Trace from refund creation (or webhook event) to email send.

Identify whether trigger relies on webhook vs direct server flow.

Show where it can fail (missing await, try/catch swallow, wrong template ID, test/live mismatches).

Webhook Signature Validation

Verify endpoint URL, signing secret usage, and event types subscribed.

Confirm the code path on charge.refunded / payment_intent.succeeded / checkout.session.completed (as applicable).

Secrets Ownership Verification

For each of Stripe and SendGrid, infer from code/comments which account the key belongs to (naming, key prefixes, project IDs).

Flag any place that could still be using Jose‚Äôs keys.

üõ†Ô∏è What I Expect in the ‚ÄúFix Plan‚Äù Section (propose only)
Time/Timezone

Exact code snippets to ensure all display uses America/Phoenix (server & client), and adds Arrive 5:45 PM + Show 6:30 PM consistently in UI and emails.

Guidance on storing UTC vs rendering in America/Phoenix, with sample functions.

Emails

Where to place await and robust error handling; log structure for SendGrid responses.

Template map with explicit template IDs variables (placeholders) and a single mailer util.

Retry strategy or fallback logging with unique event IDs.

Stripe/Webhooks

Webhook route definition, constructEvent usage with secret, subscribed events list.

Refund flow: source of truth (webhook vs controller), and the single place to send refund emails.

Secrets/Ownership

Checklist to purge legacy keys, add Treasury-owned keys, and re-deploy.

Naming convention (e.g., TREASURY_STRIPE_SECRET, TREASURY_SENDGRID_API_KEY) and .env.example (no secrets).

Security & Perf

Mask secrets in logs, remove PII from errors, add request timeouts, and avoid blocking calls in hot paths.

QA Checklist

Box-checked list for purchase, refund, emails, and time displays.

Guardrails (repeat back you agree)
You will not modify files, secrets, or settings.

You will return one markdown report following the structure above with tables and grep results.

You will clearly mark any assumptions and any commands you could not run in Replit.

Final Prompt to Execute
‚ÄúAcknowledge these instructions and begin the read-only audit now. When done, output the single analysis report described above, nothing else.‚Äù