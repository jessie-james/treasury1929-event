Replit AI — Feature Fix Pack: Artist Photo Uploads + Food Editor Save/Upload
Mode & Guardrails
- Start READ-ONLY to locate current code paths; then WRITE-MODE to implement minimal fixes.
- Do NOT read or modify events 39 or 40. Keep SAQ-A intact. No Stripe or SendGrid calls.

Branch
- Create: feat/admin-media-and-food-save

Objectives
A) Artists: Admin must upload/replace/delete the artist picture; photo is stored locally and served by the app. UI must show preview and persist on refresh.
B) Food (menu items): Admin “Update” must actually save changes (e.g., Grilled King Salmon description) and support image upload/replace/delete with immediate UI refresh.

Shared Storage/Serving
1) Ensure server serves static uploads (idempotent if already present):
   server/index.ts (or main) → 
     app.use('/uploads', express.static(path.resolve(__dirname, '..', 'uploads'), { maxAge: '7d', etag: true }));
2) Add deps if missing: multer, sharp, uuid, fs-extra (use dev-friendly ^ versions).
3) Create util: server/lib/upload.ts
   - memory Multer with limits: size ≤ (process.env.UPLOAD_MAX_IMAGE_MB || 8) MB
   - allowed mime: image/jpeg, image/png, image/webp
   - function saveImage({buffer, artistId|menuItemId, subdir}):
       • sharp(buffer).rotate().resize({ width: 1600, height: 1600, fit: 'inside', background: '#fff' })
         .webp({ quality: 85 }) → save as /uploads/<subdir>/<id>/photo.webp
       • also create /uploads/<subdir>/<id>/thumb.webp width 400
       • return { photoUrl: `/uploads/<subdir>/<id>/photo.webp`, thumbUrl: `/uploads/<subdir>/<id>/thumb.webp` }
   - function removeImages(dir) to delete existing files safely.

A) ARTISTS — Backend
4) Find the artists data model and CRUD (grep: "Artist", "artists", "photoUrl"). If not split, create server/routes-admin-artists.ts.
5) Add admin routes (behind existing auth + writeGuard). Write-guard rule: resolve artist → eventId; if eventId ∈ PROTECT_EVENT_IDS → 403.
   - POST /api/admin/artists/:artistId/photo
       * multer.single('file'), validate mime/size.
       * save via saveImage({ subdir:'artists', artistId })
       * update DB: artists.photoUrl = photoUrl
       * return { ok:true, photoUrl, thumbUrl }
   - DELETE /api/admin/artists/:artistId/photo
       * removeImages(`/uploads/artists/${artistId}`)
       * update DB: artists.photoUrl = null
       * return { ok:true }
   - PATCH /api/admin/artists/:artistId (non-photo fields): ensure name/role/bio persist correctly (zod schema). Keep photoUrl untouched unless provided.

B) ARTISTS — Admin UI
6) Update client/src/components/backoffice/EventArtists.tsx:
   - Replace “Photo URL (Optional)” with:
       • If artist.photoUrl → show preview <img> + buttons: “Replace Photo”, “Remove Photo”
       • If none → “Upload Photo” button or drag/drop area
       • (Optional) small “Use external URL” expander to set photoUrl manually
   - Handlers:
       const onUpload = async (file) => {
         const fd = new FormData(); fd.append('file', file);
         await fetch(`/api/admin/artists/${artist.id}/photo`, { method:'POST', body: fd, credentials:'include' });
         invalidate artists query; toast success.
       }
       const onRemove = async () => {
         await fetch(`/api/admin/artists/${artist.id}/photo`, { method:'DELETE', credentials:'include' });
         invalidate; toast success.
       }
   - Null-safe rendering everywhere:
       const imgSrc = artist.photoUrl ?? '/assets/placeholder-artist.jpg';

C) FOOD/MENU — Backend (fix “Update” not saving + add image upload)
7) Locate current menu item model/table (grep: "menu", "food", "entree", "food_options", "menu_items") in shared/schema.ts and storage layer. Use the existing table (no schema change).
8) Add/repair admin routes (behind auth; no event write-guard needed for global items; keep route prefixes consistent with your code, adjust names if needed):
   - PATCH /api/admin/menu/items/:id
       * Accept JSON: { name?, description?, dietaryRestrictions?, type?, isAvailable? } (no image)
       * Validate fields; update the row; return updated record.
   - POST /api/admin/menu/items/:id/photo
       * multer.single('file'), mime/size validation.
       * save via saveImage({ subdir:'menu', menuItemId:id })
       * update DB: menu_items.photoUrl (or the field your schema uses) = photoUrl
       * return { ok:true, photoUrl }
   - DELETE /api/admin/menu/items/:id/photo
       * remove images; set photoUrl = null
       * return { ok:true }
   - If front end currently calls PUT or POST for updates, support those verbs too (accept PATCH/PUT/POST idempotently) to close the mismatch causing “Update” to appear to work but not persist.

   Implementation notes:
   - Ensure you `await` DB updates and return the updated row (Drizzle’s .returning()).
   - If the current Zod schema omits description/photoUrl, expand it; otherwise the update will drop fields.

D) FOOD/MENU — Admin UI
9) Find Food tab component (grep: "Food", "Menu", "Entrée", "Kitchen Report"). Likely under client/src/pages/backoffice or components/backoffice.
10) Fix form ↔ state binding and submit handler:
    - Ensure inputs are controlled and send the PATCH payload with the correct keys that the backend expects.
    - On success: invalidate the query for the list/detail so the new description and image show immediately.
11) Add image UI:
    - If item.photoUrl → preview + “Replace Photo” + “Remove Photo”.
    - If none → “Upload Photo”.
    - POST to /api/admin/menu/items/:id/photo and DELETE accordingly.
12) Add toasts for success/error; disable buttons while uploading/saving.

E) Tests
13) Add vitest tests:
    - tests/admin-artist-photo.spec.ts
        ✓ POST upload returns /uploads/artists/<id>/photo.webp and DB updated
        ✓ DELETE clears photo and removes files
        ✓ Write-guard 403 when artist.eventId ∈ PROTECT_EVENT_IDS
    - tests/admin-menu-save.spec.ts
        ✓ PATCH updates description and returns updated row
        ✓ Upload/replace photo updates photoUrl
        ✓ DELETE clears photoUrl
        ✓ Reject invalid mime/oversize

F) Build & Verify
14) Build production and run quick UI smoke in headless:
    - Update an existing menu item “Grilled King Salmon” description, check GET reflects change.
    - Upload an image for Salmon; ensure photoUrl points to /uploads/menu/<id>/photo.webp.
    - Upload artist photos for Sophia Su and Dr. Fanya Lin; preview appears; refresh persists.
    - Confirm no references to events 39 or 40 were read/modified in logs.
15) Commit messages:
    - feat(artists): upload/replace/delete artist photo with sharp + static serving
    - fix(menu): admin update reliably persists fields; add image upload endpoints
    - feat(api): shared uploads util and cache-friendly static /uploads
    - test(admin): artist/menu media + save flows

Config Docs
16) Update .env.example (docs only):
    UPLOAD_MAX_IMAGE_MB=8
    IMAGE_ALLOWED_TYPES=image/jpeg,image/png,image/webp

Output
- Produce TRE1929_AdminMediaAndFoodFix_<timestamp>.md with:
  • Files changed + key line ranges
  • Example curl calls for POST/DELETE upload endpoints (artist + menu)
  • Screenshot/HTML snippet of updated Artist and Food editors
  • Test summary
  • Manual Verification Checklist:
      [ ] Upload artist photo → preview persists after refresh
      [ ] Replace and remove artist photo work
      [ ] Edit Salmon description → click Update → refresh shows new text
      [ ] Upload/replace/remove Salmon photo works
      [ ] No Stripe/SendGrid calls; no changes to events 39/40
