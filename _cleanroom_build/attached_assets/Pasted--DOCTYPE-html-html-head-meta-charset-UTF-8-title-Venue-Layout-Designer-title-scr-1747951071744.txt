<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Venue Layout Designer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      padding: 20px; 
      max-width: 1020px; 
      margin: 0 auto;
    }
    .workflow-step {
      margin-bottom: 20px;
      padding: 15px;
      border-radius: 8px;
      border: 2px solid #ddd;
    }
    .workflow-step.active {
      border-color: #4a90e2;
      background: #f8fafc;
    }
    .workflow-step.completed {
      border-color: #28a745;
      background: #f8fff9;
    }
    .step-header {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 10px;
      color: #333;
    }
    .step-content {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: center;
    }
    .control-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    canvas { 
      border: 1px solid #ccc; 
      margin: 20px auto;
      display: block;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    button { 
      padding: 8px 15px;
      background: #4a90e2;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background 0.2s;
      font-size: 14px;
    }
    button:hover { background: #3a80d2; }
    button:disabled { 
      background: #ccc; 
      cursor: not-allowed; 
    }
    button.success { background: #28a745; }
    button.success:hover { background: #218838; }
    button.danger { background: #dc3545; }
    button.danger:hover { background: #c82333; }
    
    select, input[type="number"], input[type="checkbox"] {
      padding: 4px 6px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    label { 
      font-weight: 500;
      margin-right: 8px;
    }
    .status-bar {
      margin-top: 15px;
      padding: 10px;
      background: #f0f8ff;
      border-radius: 4px;
      color: #333;
      text-align: center;
      font-weight: 500;
    }
    .step-number {
      display: inline-block;
      width: 25px;
      height: 25px;
      background: #4a90e2;
      color: white;
      border-radius: 50%;
      text-align: center;
      line-height: 25px;
      font-weight: bold;
      margin-right: 10px;
    }
    .workflow-step.completed .step-number {
      background: #28a745;
    }
  </style>
</head>
<body>
  <h1>üèüÔ∏è Venue Layout Designer</h1>
  
  <!-- Step 1: Create Venue -->
  <div class="workflow-step active" id="step1">
    <div class="step-header">
      <span class="step-number">1</span>Create Your Venue Space
    </div>
    <div class="step-content">
      <button id="createVenueBtn">Create Venue Rectangle</button>
      <button id="nextToStageBtn" class="success" disabled>Next: Add Stage ‚Üí</button>
      <span style="color: #666; font-style: italic;">Draw and resize the venue boundaries</span>
    </div>
  </div>

  <!-- Step 2: Add Stage (Optional) -->
  <div class="workflow-step" id="step2">
    <div class="step-header">
      <span class="step-number">2</span>Add Stage (Optional)
    </div>
    <div class="step-content">
      <button id="backToVenueBtn" style="background: #6c757d;">‚Üê Back: Edit Venue</button>
      <button id="addStageBtn" disabled>Add Stage</button>
      <button id="nextToTablesBtn" class="success" disabled>Skip Stage & Continue ‚Üí</button>
      <span style="color: #666; font-style: italic;">Choose to add a stage or skip to tables</span>
    </div>
  </div>

  <!-- Step 3: Add Tables -->
  <div class="workflow-step" id="step3">
    <div class="step-header">
      <span class="step-number">3</span>Design Table Layout
    </div>
    <div class="step-content">
      <button id="backToStageBtn" style="background: #6c757d;">‚Üê Back: Edit Stage</button>
      <div class="control-group">
        <label>Table Size:</label>
        <select id="tableSize" disabled>
          <option value="1">Size 1 (Tiny)</option>
          <option value="2">Size 2 (Small)</option>
          <option value="3">Size 3 (Compact)</option>
          <option value="4">Size 4 (Medium-Small)</option>
          <option value="5">Size 5 (Medium)</option>
          <option value="6">Size 6 (Medium-Large)</option>
          <option value="7">Size 7 (Large)</option>
          <option value="8" selected>Size 8 (Extra Large)</option>
          <option value="9">Size 9 (Jumbo)</option>
        </select>
      </div>
      
      <div class="control-group">
        <label>Table Type:</label>
        <select id="tableType" disabled>
          <option value="full">Full Circle</option>
          <option value="half">Half Circle</option>
        </select>
      </div>
      
      <div class="control-group">
        <label>Seat Count:</label>
        <input type="number" id="seatCount" value="4" min="1" max="8" style="width:60px;" disabled/>
      </div>

      <div class="control-group">
        <label><input type="checkbox" id="showStageLines" disabled/> Stage Lines</label>
      </div>
      
      <button id="addTableBtn" disabled>Add Table</button>
      <button id="deleteSelectedBtn" disabled>Delete Selected</button>
      <button id="selectAllBtn" disabled>Select All</button>
      <button id="unselectAllBtn" disabled>Unselect All</button>
    </div>
  </div>

  <!-- Final Actions -->
  <div class="workflow-step" id="stepFinal">
    <div class="step-header">
      <span class="step-number">üîÑ</span>Reset & Start Over
    </div>
    <div class="step-content">
      <button id="resetBtn" class="danger">Reset Everything</button>
      <span style="color: #666; font-style: italic;">Start with a new venue</span>
    </div>
  </div>
  
  <canvas id="designCanvas" width="1000" height="700"></canvas>
  
  <div class="status-bar">
    <span id="status">Welcome! Start by creating your venue boundaries.</span>
  </div>

  <script>
    // Initialize the Fabric.js canvas
    const canvas = new fabric.Canvas('designCanvas', { 
      selection: true,
      preserveObjectStacking: true
    });
    
    // Workflow state
    let currentStep = 1;
    let venue = null;
    let stage = null;
    let tableCounter = 0;
    let hasStageOption = false;
    
    // Function to get the next available table number - MOVED TO TOP
    function getNextTableNumber() {
      try {
        const existingTables = canvas.getObjects().filter(obj => obj.tableRef);
        
        // If no tables exist, start with 1
        if (existingTables.length === 0) {
          console.log('No existing tables, returning 1');
          return 1;
        }
        
        const existingNumbers = existingTables.map(table => table.tableRef.tableNumber).sort((a, b) => a - b);
        
        console.log('Existing tables:', existingTables.length);
        console.log('Existing numbers:', existingNumbers);
        
        // Find the first missing number starting from 1
        for (let i = 1; i <= Math.max(...existingNumbers) + 1; i++) {
          if (!existingNumbers.includes(i)) {
            console.log('Found missing number:', i);
            return i;
          }
        }
        
        // Fallback - this should never be reached with correct logic
        const fallback = Math.max(...existingNumbers) + 1;
        console.log('Using fallback number:', fallback);
        return fallback;
      } catch (error) {
        console.error('Error in getNextTableNumber:', error);
        // Emergency fallback - use simple incrementing
        return Date.now() % 1000; // Use timestamp to avoid conflicts
      }
    }
    
    // Display status messages
    function showStatus(message, duration = 3000) {
      const statusEl = document.getElementById('status');
      statusEl.textContent = message;
      if (duration > 0) {
        setTimeout(() => {
          updateStatusForCurrentStep();
        }, duration);
      }
    }
    
    function updateStatusForCurrentStep() {
      const statusEl = document.getElementById('status');
      switch(currentStep) {
        case 1:
          statusEl.textContent = 'Welcome! Start by creating your venue boundaries.';
          break;
        case 2:
          statusEl.textContent = 'Decide if you want to add a stage to your venue.';
          break;
        case 3:
          statusEl.textContent = 'Now you can add tables to your venue. Double-click tables to duplicate them.';
          break;
      }
    }
    
    function updateWorkflowUI() {
      // Update step visual states
      document.querySelectorAll('.workflow-step').forEach((step, index) => {
        const stepNum = index + 1;
        step.classList.remove('active', 'completed');
        
        if (stepNum < currentStep || (stepNum === 2 && currentStep === 3 && !hasStageOption)) {
          step.classList.add('completed');
        } else if (stepNum === currentStep) {
          step.classList.add('active');
        }
      });
      
      // Unlock venue when going back to step 1
      if (venue && currentStep === 1) {
        venue.selectable = true;
        venue.evented = true;
      }
      // Lock venue when moving past step 1
      else if (venue && currentStep > 1) {
        venue.selectable = false;
        venue.evented = false;
      }
      
      // Unlock stage when in step 2
      if (stage && currentStep === 2) {
        stage.selectable = true;
        stage.evented = true;
      }
      // Lock stage when moving to step 3
      else if (stage && currentStep > 2) {
        stage.selectable = false;
        stage.evented = false;
      }
      
      // Enable/disable controls based on current step
      const step1Controls = ['createVenueBtn'];
      const step2Controls = ['addStageBtn', 'nextToTablesBtn'];
      const step3Controls = ['tableSize', 'tableType', 'seatCount', 'showStageLines', 'addTableBtn', 'deleteSelectedBtn', 'selectAllBtn', 'unselectAllBtn'];
      const nextButtons = ['nextToStageBtn', 'nextToTablesBtn'];
      const backButtons = ['backToVenueBtn', 'backToStageBtn'];
      
      // Disable all first
      [...step1Controls, ...step2Controls, ...step3Controls, ...nextButtons, ...backButtons].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.disabled = true;
      });
      
      // Enable based on current step
      if (currentStep === 1) {
        step1Controls.forEach(id => {
          const el = document.getElementById(id);
          if (el) el.disabled = false;
        });
        // Enable next button only if venue exists
        if (venue) {
          document.getElementById('nextToStageBtn').disabled = false;
        }
      } else if (currentStep === 2) {
        step2Controls.forEach(id => {
          const el = document.getElementById(id);
          if (el) el.disabled = false;
        });
        // Enable back button
        document.getElementById('backToVenueBtn').disabled = false;
      } else if (currentStep === 3) {
        step3Controls.forEach(id => {
          const el = document.getElementById(id);
          if (el) el.disabled = false;
        });
        // Enable back button
        document.getElementById('backToStageBtn').disabled = false;
      }
      
      updateStatusForCurrentStep();
    }
    
    // Step 1: Create Venue
    document.getElementById('createVenueBtn').onclick = () => {
      if (venue) {
        canvas.remove(venue);
      }
      
      // Create a resizable venue rectangle
      venue = new fabric.Rect({
        left: 100,
        top: 100,
        width: 800,
        height: 500,
        fill: 'rgba(240, 248, 255, 0.3)',
        stroke: '#4a90e2',
        strokeWidth: 3,
        strokeDashArray: [10, 5],
        selectable: true,
        hasControls: true,
        hasBorders: true,
        transparentCorners: false,
        cornerColor: '#4a90e2',
        cornerSize: 10
      });
      
      canvas.add(venue);
      canvas.setActiveObject(venue);
      showStatus('Venue created! Resize and position it as needed, then click "Next: Add Stage".');
      
      // Enable the next phase button
      updateWorkflowUI();
    };
    
    // Manual phase progression buttons
    document.getElementById('nextToStageBtn').onclick = () => {
      currentStep = 2;
      updateWorkflowUI();
      showStatus('Now decide if you want to add a stage to your venue.');
    };
    
    document.getElementById('nextToTablesBtn').onclick = () => {
      currentStep = 3;
      updateWorkflowUI();
      showStatus('Great! Now you can start adding tables to your venue layout.');
    };
    
    // Back buttons
    document.getElementById('backToVenueBtn').onclick = () => {
      currentStep = 1;
      updateWorkflowUI();
      showStatus('Back to venue editing. You can now modify your venue boundaries.');
    };
    
    document.getElementById('backToStageBtn').onclick = () => {
      currentStep = 2;
      updateWorkflowUI();
      showStatus('Back to stage editing. You can now modify or add/remove your stage.');
    };
    
    // Step 2: Stage options - simplified
    document.getElementById('addStageBtn').onclick = () => {
      if (stage) {
        canvas.remove(stage);
      }
      
      // Create a resizable stage
      stage = new fabric.Rect({
        left: 450,
        top: 150,
        width: 120,
        height: 40,
        fill: 'black',
        stroke: 'white',
        strokeWidth: 2,
        selectable: true,
        hasControls: true,
        hasBorders: true,
        transparentCorners: false,
        cornerColor: '#ffffff',
        cornerSize: 8
      });
      
      // Add stage label
      const stageLabel = new fabric.Text('STAGE', {
        left: stage.left + stage.width/2,
        top: stage.top + stage.height/2,
        fontSize: 14,
        fontFamily: 'Arial',
        fill: 'white',
        originX: 'center',
        originY: 'center',
        selectable: false,
        hoverCursor: 'default'
      });
      
      // Update stage label position when stage moves/resizes
      stage.on('moving', () => {
        stageLabel.set({
          left: stage.left + stage.width/2,
          top: stage.top + stage.height/2
        });
        canvas.requestRenderAll();
      });
      
      stage.on('scaling', () => {
        stageLabel.set({
          left: stage.left + (stage.width * stage.scaleX)/2,
          top: stage.top + (stage.height * stage.scaleY)/2
        });
        canvas.requestRenderAll();
      });
      
      canvas.add(stage);
      canvas.add(stageLabel);
      canvas.setActiveObject(stage);
      
      hasStageOption = true;
      showStatus('Stage created! Position and resize it, then continue to tables.');
      
      // Change button text to indicate next step
      document.getElementById('nextToTablesBtn').textContent = 'Continue to Tables ‚Üí';
      document.getElementById('nextToTablesBtn').className = 'success';
    };
    
    document.getElementById('nextToTablesBtn').onclick = () => {
      currentStep = 3;
      updateWorkflowUI();
      if (stage) {
        showStatus('Great! Now you can start adding tables to your venue layout.');
      } else {
        showStatus('No stage added. You can now start adding tables to your venue.');
      }
    };
    
    // Table class with size support
    class Table {
      constructor(x, y, tableSize = 8, tableType = 'full', seatCount = 4) {
        console.log('Table constructor called with:', { x, y, tableSize, tableType, seatCount });
        
        try {
          // Use smart numbering to fill gaps
          console.log('Getting next table number...');
          this.tableNumber = getNextTableNumber();
          console.log('Assigned table number:', this.tableNumber);
          
          this.tableSize = tableSize; // Store the table's individual size
          this.tableType = tableType; // Store the table's individual type
          this.seatCount = seatCount; // Store the table's individual seat count
          
          console.log('Creating fabric group...');
          this.group = new fabric.Group([], {
            left: x, 
            top: y,
            originX: 'center', 
            originY: 'center',
            hasControls: true,
            hasBorders: true,
            selectable: true,
            padding: 10,
            transparentCorners: false,
            cornerColor: '#5286e5',
            cornerSize: 8,
            borderColor: '#5286e5',
            borderDashArray: [3, 3]
          });
          
          console.log('Setting controls visibility...');
          this.group.setControlsVisibility({
            tl: false, tr: false, br: false, bl: false,
            ml: false, mt: false, mr: false, mb: false,
            mtr: true
          });
          
          console.log('Setting table reference...');
          this.group.tableRef = this;
          this.stageLine = null;
          
          console.log('Adding to canvas...');
          canvas.add(this.group);
          
          console.log('Calling redraw...');
          this.redraw(x, y);
          
          console.log('Updating stage line...');
          this.updateStageLine();
          
          console.log('Setting up event handlers...');
          this.group.on('moving', () => {
            this.redraw(this.group.left, this.group.top);
            this.updateStageLine();
          });
          
          this.group.on('rotating', () => {
            // Update stage line when rotating but don't redraw the table
            this.updateStageLine();
          });
          
          this.group.on('mousedblclick', () => {
            // Duplicate using THIS table's exact configuration AND rotation
            const newTable = new Table(
              this.group.left + 100, 
              this.group.top + 100, 
              this.tableSize,    // Use this table's size
              this.tableType,    // Use this table's type
              this.seatCount     // Use this table's seat count
            );
            
            // Copy the rotation from the original table
            newTable.group.set({ angle: this.group.angle || 0 });
            newTable.group.setCoords();
            canvas.requestRenderAll();
            
            showStatus(`Table ${newTable.tableNumber} duplicated from Table ${this.tableNumber} (Size: ${this.tableSize}, Type: ${this.tableType}, Seats: ${this.seatCount})!`);
          });
          
          console.log('Table creation completed successfully');
          showStatus(`Table ${this.tableNumber} added!`);
          
        } catch (error) {
          console.error('Error in Table constructor:', error);
          showStatus('‚ùå Error creating table: ' + error.message);
        }
      }
      
      // Get table dimensions based on size
      getTableDimensions() {
        const sizeConfig = {
          1: { tableRadius: 25, seatRadius: 8,  gap: 8  }, // Tiny
          2: { tableRadius: 30, seatRadius: 10, gap: 10 }, // Small  
          3: { tableRadius: 35, seatRadius: 12, gap: 12 }, // Compact
          4: { tableRadius: 40, seatRadius: 14, gap: 14 }, // Medium-Small
          5: { tableRadius: 45, seatRadius: 16, gap: 16 }, // Medium
          6: { tableRadius: 50, seatRadius: 18, gap: 18 }, // Medium-Large
          7: { tableRadius: 55, seatRadius: 19, gap: 19 }, // Large
          8: { tableRadius: 60, seatRadius: 20, gap: 20 }, // Extra Large (current)
          9: { tableRadius: 70, seatRadius: 22, gap: 22 }  // Jumbo
        };
        
        return sizeConfig[this.tableSize] || sizeConfig[8];
      }
      
      redraw(cx, cy) {
        // Store current rotation before clearing
        const currentRotation = this.group.angle || 0;
        
        this.group._objects = [];
        if (this.group._restoreObjectsState) this.group._restoreObjectsState();
        
        // Use this table's individual configuration (not dropdown values)
        const type = this.tableType;
        const count = Math.max(1, Math.min(8, this.seatCount));
        
        // Use this table's individual size
        const dimensions = this.getTableDimensions();
        const tableRadius = dimensions.tableRadius;
        const seatR = dimensions.seatRadius;
        const seatOffset = tableRadius + seatR;
        
        if (type === 'full') {
          const tableShape = new fabric.Circle({
            radius: tableRadius, 
            fill: '#e0e0e0',
            stroke: '#555', 
            strokeWidth: 2,
            originX: 'center', 
            originY: 'center',
            shadow: new fabric.Shadow({
              color: 'rgba(0,0,0,0.2)',
              blur: 5,
              offsetX: 0,
              offsetY: 2
            })
          });
          this.group.addWithUpdate(tableShape);
          
          for (let i = 0; i < count; i++) {
            const angle = i * (360 / count);
            this.addSeat(angle, seatOffset, seatR, i);
          }
        } else {
          const halfCircleShape = new fabric.Path(
            `M ${-tableRadius},0 A ${tableRadius},${tableRadius} 0 0,1 ${tableRadius},0 L 0,0 Z`, 
            {
              fill: '#e0e0e0',
              stroke: '#555',
              strokeWidth: 2,
              originX: 'center',
              originY: 'center',
              angle: 0,
              shadow: new fabric.Shadow({
                color: 'rgba(0,0,0,0.2)',
                blur: 5,
                offsetX: 0,
                offsetY: 2
              })
            }
          );
          this.group.addWithUpdate(halfCircleShape);
          
          for (let i = 0; i < count; i++) {
            // Improved seat distribution for half-circle tables
            let angle;
            
            if (count === 1) {
              // Single seat at the back center
              angle = 270;
            } else if (count === 2) {
              // Two seats: 90¬∞ separation (¬±45¬∞ from back center)
              const angles = [225, 315]; // 90¬∞ total spread
              angle = angles[i];
            } else if (count === 3) {
              // Three seats: spread them wider (back center ¬±50¬∞)
              const angles = [220, 270, 320]; // 100¬∞ total spread
              angle = angles[i];
            } else {
              // 4+ seats: use the original 40¬∞ spacing method
              const totalSpan = (count - 1) * 40;
              const startAngle = 270 - (totalSpan / 2);
              angle = startAngle + (i * 40);
            }
            
            this.addSeat(angle, seatOffset, seatR, i);
          }
        }
        
        // Scale table number font based on table size
        const fontSize = Math.max(12, Math.min(24, 10 + this.tableSize * 1.5));
        
        const tableLabel = new fabric.Text(`${this.tableNumber}`, {
          fontSize: fontSize,
          fontFamily: 'Arial',
          fontWeight: 'bold',
          fill: '#333',
          originX: 'center',
          originY: 'center',
          angle: 0,
          top: type === 'half' ? -tableRadius * 0.5 : 0
        });
        this.group.addWithUpdate(tableLabel);
        
        // Restore position and rotation after redraw
        this.group.set({ 
          left: cx, 
          top: cy,
          angle: currentRotation // Preserve the rotation
        });
        this.group.setCoords();
        canvas.requestRenderAll();
      }
      
      addSeat(angle, distance, radius, seatNumber) {
        const rad = angle * Math.PI / 180;
        const px = distance * Math.cos(rad);
        const py = distance * Math.sin(rad);
        
        const seat = new fabric.Circle({
          radius: radius, 
          fill: '#4CAF50', 
          left: px, 
          top: py,
          originX: 'center', 
          originY: 'center',
          stroke: '#2E7D32',
          strokeWidth: 1,
          shadow: new fabric.Shadow({
            color: 'rgba(0,0,0,0.2)',
            blur: 3,
            offsetX: 0,
            offsetY: 1
          })
        });
        this.group.addWithUpdate(seat);
        
        // Scale seat number font based on seat size
        const fontSize = Math.max(8, Math.min(16, radius - 4));
        
        const seatLabel = new fabric.Text(`${seatNumber + 1}`, {
          left: px,
          top: py,
          fontSize: fontSize,
          fontFamily: 'Arial',
          fontWeight: 'bold',
          fill: 'white',
          originX: 'center',
          originY: 'center',
          angle: 0
        });
        this.group.addWithUpdate(seatLabel);
      }
      
      updateStageLine() {
        if (this.stageLine) {
          canvas.remove(this.stageLine);
          this.stageLine = null;
        }
        
        const showStageLines = document.getElementById('showStageLines').checked;
        if (!showStageLines || !stage) return;
        
        const stageFrontCenterX = stage.left + (stage.width * (stage.scaleX || 1)) / 2;
        const stageFrontCenterY = stage.top + (stage.height * (stage.scaleY || 1));
        
        this.stageLine = new fabric.Line(
          [stageFrontCenterX, stageFrontCenterY, this.group.left, this.group.top],
          {
            stroke: 'rgba(100, 100, 100, 0.6)',
            strokeWidth: 2,
            strokeDashArray: [5, 5],
            selectable: false,
            evented: false,
            excludeFromExport: true
          }
        );
        
        canvas.add(this.stageLine);
        canvas.sendToBack(this.stageLine);
        canvas.requestRenderAll();
      }
    }
    
    // Step 3: Table controls
    document.getElementById('addTableBtn').onclick = () => {
      console.log('Add Table button clicked');
      try {
        const randomX = 300 + Math.random() * 400;
        const randomY = 250 + Math.random() * 300;
        const currentSize = parseInt(document.getElementById('tableSize').value);
        const currentType = document.getElementById('tableType').value;
        const currentSeats = parseInt(document.getElementById('seatCount').value);
        
        console.log('Creating table with:', { randomX, randomY, currentSize, currentType, currentSeats });
        
        new Table(randomX, randomY, currentSize, currentType, currentSeats);
        
      } catch (error) {
        console.error('Error in addTableBtn click handler:', error);
        showStatus('‚ùå Error adding table: ' + error.message);
      }
    };
    
    document.getElementById('deleteSelectedBtn').onclick = () => {
      const activeObjects = canvas.getActiveObjects();
      const tablesToDelete = activeObjects.filter(obj => obj.tableRef != null);
      
      if (tablesToDelete.length === 0) {
        showStatus('No tables selected!');
        return;
      }
      
      canvas.discardActiveObject();
      
      tablesToDelete.forEach(obj => {
        if (obj.tableRef && obj.tableRef.stageLine) {
          canvas.remove(obj.tableRef.stageLine);
        }
        canvas.remove(obj);
      });
      
      canvas.requestRenderAll();
      showStatus(`Deleted ${tablesToDelete.length} table(s)!`);
    };
    
    document.getElementById('selectAllBtn').onclick = () => {
      const allTables = canvas.getObjects().filter(obj => obj.tableRef);
      
      if (allTables.length === 0) {
        showStatus('No tables to select!');
        return;
      }
      
      const activeSelection = new fabric.ActiveSelection(allTables, { canvas });
      activeSelection.setControlsVisibility({
        tl: false, tr: false, br: false, bl: false,
        ml: false, mt: false, mr: false, mb: false,
        mtr: true
      });
      
      canvas.setActiveObject(activeSelection);
      canvas.requestRenderAll();
      showStatus(`Selected ${allTables.length} table(s)`);
    };
    
    document.getElementById('unselectAllBtn').onclick = () => {
      canvas.discardActiveObject();
      canvas.requestRenderAll();
      showStatus('Selection cleared');
    };
    
    // Control changes - only affect selected tables
    const controlIds = ['tableType', 'seatCount', 'showStageLines'];
    controlIds.forEach(id => {
      document.getElementById(id).addEventListener('change', () => {
        updateSelectedTables();
        updateAllStageLines();
      });
    });
    
    // Table size only affects selected tables
    document.getElementById('tableSize').addEventListener('change', () => {
      updateSelectedTablesSize();
    });
    
    function updateSelectedTablesSize() {
      const activeObjects = canvas.getActiveObjects();
      const tablesToUpdate = activeObjects.filter(obj => obj.tableRef);
      
      if (tablesToUpdate.length === 0) {
        showStatus('No tables selected for size update. Select a table first!', 2000);
        return;
      }
      
      const newSize = parseInt(document.getElementById('tableSize').value);
      
      tablesToUpdate.forEach(obj => {
        if (obj.tableRef) {
          obj.tableRef.tableSize = newSize; // Update the table's individual size
          obj.tableRef.redraw(obj.left, obj.top);
        }
      });
      
      showStatus(`Updated size to ${newSize} for ${tablesToUpdate.length} table(s)`);
    }
    
    function updateSelectedTables() {
      const activeObjects = canvas.getActiveObjects();
      const tablesToUpdate = activeObjects.filter(obj => obj.tableRef);
      
      if (tablesToUpdate.length === 0) {
        showStatus('No tables selected for update. Select a table first!', 2000);
        return;
      }
      
      // Update individual table properties from current dropdown values
      const newType = document.getElementById('tableType').value;
      const newSeatCount = parseInt(document.getElementById('seatCount').value);
      
      tablesToUpdate.forEach(obj => {
        if (obj.tableRef) {
          obj.tableRef.tableType = newType;     // Update individual table type
          obj.tableRef.seatCount = newSeatCount; // Update individual seat count
          obj.tableRef.redraw(obj.left, obj.top);
        }
      });
      
      showStatus(`Updated ${tablesToUpdate.length} table(s)`);
    }
    
    function updateAllStageLines() {
      const allTables = canvas.getObjects().filter(obj => obj.tableRef);
      allTables.forEach(tableGroup => {
        if (tableGroup.tableRef) {
          tableGroup.tableRef.updateStageLine();
        }
      });
    }
    
    // Reset functionality with confirmation - moved to end of script
    function resetEverything() {
      const confirmReset = confirm(
        '‚ö†Ô∏è RESET EVERYTHING?\n\n' +
        'This will permanently delete:\n' +
        '‚Ä¢ Your venue boundaries\n' +
        '‚Ä¢ The stage (if added)\n' +
        '‚Ä¢ All tables and seats\n' +
        '‚Ä¢ All your current progress\n\n' +
        'Are you sure you want to start over?'
      );
      
      if (confirmReset) {
        try {
          console.log('Starting reset process...');
          
          // Remove all objects manually to ensure cleanup
          const allObjects = canvas.getObjects();
          console.log('Objects to remove:', allObjects.length);
          
          allObjects.forEach(obj => {
            canvas.remove(obj);
          });
          
          // Discard any active selections
          canvas.discardActiveObject();
          
          // Clear the canvas completely
          canvas.clear();
          
          // Reset all variables
          venue = null;
          stage = null;
          hasStageOption = false;
          currentStep = 1;
          
          console.log('Variables reset, updating form controls...');
          
          // Reset form controls to defaults
          document.getElementById('tableSize').value = '8';
          document.getElementById('tableType').value = 'full';
          document.getElementById('seatCount').value = '4';
          document.getElementById('showStageLines').checked = false;
          
          // Force canvas re-render
          canvas.requestRenderAll();
          
          // Update UI state
          updateWorkflowUI();
          
          console.log('Reset completed successfully');
          
          // Success message
          showStatus('‚úÖ Everything has been reset! Start by creating your venue boundaries.', 5000);
          
        } catch (error) {
          console.error('Reset error:', error);
          showStatus('‚ùå Reset encountered an issue. Please refresh the page.', 5000);
        }
      } else {
        showStatus('Reset cancelled. Your venue design is safe!', 3000);
      }
    }
    
    // Initialize
    updateWorkflowUI();
    
    // Add reset button event listener at the very end
    document.getElementById('resetBtn').addEventListener('click', resetEverything);
  </script>
</body>
</html>